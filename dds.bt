//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: DirectDraw Surface Texture
//   Authors: Pio
//   Version: 0.1 (very unfinished for now)
//   Purpose: Parse DDS files
//  Category: Textures
// File Mask: *.dds
//  ID Bytes: 
//   History: 
//------------------------------------------------
#include "include/common.bt"

LittleEndian();

typedef enum
{
    UseCaps = 0x1,
    UseHeight = 0x2,
    UseWidth = 0x4,
    UsePitch = 0x8,
    UsePixelFormat = 0x1000,
    UseMipMapCount = 0x20000,
    UseLinearSize = 0x80000,
    UseDepth = 0x800000,
} DDSFlags <format=binary, read=DDSFlags_ToString>;

string DDSFlags_ToString(DDSFlags& val)
{
    local string str = "";

    if ((val & UseCaps) == UseCaps)
        str += "UseCaps ";
    if ((val & UseHeight) == UseHeight)
        str += "UseHeight ";
    if ((val & UseWidth) == UseWidth)
        str += "UseWidth ";
    if ((val & UsePitch) == UsePitch)
        str += "UsePitch ";
    if ((val & UsePixelFormat) == UsePixelFormat)
        str += "UsePixelFormat ";
    if ((val & UseMipMapCount) == UseMipMapCount)
        str += "UseMipMapCount ";
    if ((val & UseLinearSize) == UseLinearSize)
        str += "UseLinearSize ";
    if ((val & UseDepth) == UseDepth)
        str += "UseDepth ";
    return str;
}

typedef enum
{
    HasAlphaPixels = 0x1,
    HasAlpha = 0x2,
    HasFourCC = 0x4,
    HasCLUT = 0x40,
    HasRGB = 0x40,
    HasYUV = 0x200,
    HasPremultAlpha = 0x08000,
    HasLuminance = 0x20000,
} DDSPixelFormatFlags <format=binary, read=DDSPixelFormatFlags_ToString>;

string DDSPixelFormatFlags_ToString(DDSPixelFormatFlags& val)
{
    local string str = "";

    if ((val & HasAlphaPixels) == HasAlphaPixels)
        str += "HasAlphaPixels ";
    if ((val & HasAlpha) == HasAlpha)
        str += "HasAlpha ";
    if ((val & HasFourCC) == HasFourCC)
        str += "HasFourCC ";
    if ((val & HasRGB) == HasRGB)
        str += "HasRGB ";
    if ((val & HasYUV) == HasYUV)
        str += "HasYUV ";
    if ((val & HasPremultAlpha) == HasPremultAlpha)
        str += "HasPremultAlpha ";
    if ((val & HasLuminance) == HasLuminance)
        str += "HasLuminance ";
    return str;
}

typedef struct
{
    uint Size;
    DDSPixelFormatFlags Flags;
    char FourCC[4];
    uint RGBBitCount;
    uint RBitMask <format=binary>;
    uint GBitMask <format=binary>;
    uint BBitMask <format=binary>;
    uint ABitMask <format=binary>;
} DDSPixelFormat <bgcolor=cBlue>;

typedef enum 
{
    Complex = 0x8,
    Texture = 0x1000,
    MipMap =  0x400000,
} DDSCaps <format=binary, read=DDSCaps_ToString>;

string DDSCaps_ToString(DDSCaps& val)
{
    local string str = "";

    if ((val & Complex) == Complex)
        str += "Complex ";
    if ((val & Texture) == Texture)
        str += "Texture ";
    if ((val & MipMap) == MipMap)
        str += "MipMap ";
    return str;
}

typedef enum 
{
    CubeMap = 0x200,
    CubeMap_PositiveX = 0x400,
    CubeMap_NegativeX = 0x800,
    CubeMap_PositiveY = 0x1000,
    CubeMap_NegativeY = 0x2000,
    CubeMap_PositiveZ = 0x4000,
    CubeMap_NegativeZ = 0x8000,
    Volume = 0x200000
} DDSCaps2 <format=binary, read=DDSCaps2_ToString>;

string DDSCaps2_ToString(DDSCaps2& val)
{
    local string str = "";

    if ((val & CubeMap) == CubeMap)
        str += "CubeMap ";
    if ((val & CubeMap_PositiveX) == CubeMap_PositiveX)
        str += "CubeMap_PositiveX ";
    if ((val & CubeMap_NegativeX) == CubeMap_NegativeX)
        str += "CubeMap_NegativeX ";
    if ((val & CubeMap_PositiveY) == CubeMap_PositiveY)
        str += "CubeMap_PositiveY ";
    if ((val & CubeMap_NegativeY) == CubeMap_NegativeY)
        str += "CubeMap_NegativeY ";
    if ((val & CubeMap_PositiveZ) == CubeMap_PositiveZ)
        str += "CubeMap_PositiveZ ";
    if ((val & CubeMap_NegativeZ) == CubeMap_NegativeZ)
        str += "CubeMap_NegativeZ ";
    if ((val & Volume) == Volume)
        str += "Volume ";
    return str;
}

typedef enum {
  DXGI_FORMAT_UNKNOWN = 0,
  DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
  DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
  DXGI_FORMAT_R32G32B32A32_UINT = 3,
  DXGI_FORMAT_R32G32B32A32_SINT = 4,
  DXGI_FORMAT_R32G32B32_TYPELESS = 5,
  DXGI_FORMAT_R32G32B32_FLOAT = 6,
  DXGI_FORMAT_R32G32B32_UINT = 7,
  DXGI_FORMAT_R32G32B32_SINT = 8,
  DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
  DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
  DXGI_FORMAT_R16G16B16A16_UNORM = 11,
  DXGI_FORMAT_R16G16B16A16_UINT = 12,
  DXGI_FORMAT_R16G16B16A16_SNORM = 13,
  DXGI_FORMAT_R16G16B16A16_SINT = 14,
  DXGI_FORMAT_R32G32_TYPELESS = 15,
  DXGI_FORMAT_R32G32_FLOAT = 16,
  DXGI_FORMAT_R32G32_UINT = 17,
  DXGI_FORMAT_R32G32_SINT = 18,
  DXGI_FORMAT_R32G8X24_TYPELESS = 19,
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
  DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
  DXGI_FORMAT_R10G10B10A2_UNORM = 24,
  DXGI_FORMAT_R10G10B10A2_UINT = 25,
  DXGI_FORMAT_R11G11B10_FLOAT = 26,
  DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
  DXGI_FORMAT_R8G8B8A8_UNORM = 28,
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
  DXGI_FORMAT_R8G8B8A8_UINT = 30,
  DXGI_FORMAT_R8G8B8A8_SNORM = 31,
  DXGI_FORMAT_R8G8B8A8_SINT = 32,
  DXGI_FORMAT_R16G16_TYPELESS = 33,
  DXGI_FORMAT_R16G16_FLOAT = 34,
  DXGI_FORMAT_R16G16_UNORM = 35,
  DXGI_FORMAT_R16G16_UINT = 36,
  DXGI_FORMAT_R16G16_SNORM = 37,
  DXGI_FORMAT_R16G16_SINT = 38,
  DXGI_FORMAT_R32_TYPELESS = 39,
  DXGI_FORMAT_D32_FLOAT = 40,
  DXGI_FORMAT_R32_FLOAT = 41,
  DXGI_FORMAT_R32_UINT = 42,
  DXGI_FORMAT_R32_SINT = 43,
  DXGI_FORMAT_R24G8_TYPELESS = 44,
  DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
  DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
  DXGI_FORMAT_R8G8_TYPELESS = 48,
  DXGI_FORMAT_R8G8_UNORM = 49,
  DXGI_FORMAT_R8G8_UINT = 50,
  DXGI_FORMAT_R8G8_SNORM = 51,
  DXGI_FORMAT_R8G8_SINT = 52,
  DXGI_FORMAT_R16_TYPELESS = 53,
  DXGI_FORMAT_R16_FLOAT = 54,
  DXGI_FORMAT_D16_UNORM = 55,
  DXGI_FORMAT_R16_UNORM = 56,
  DXGI_FORMAT_R16_UINT = 57,
  DXGI_FORMAT_R16_SNORM = 58,
  DXGI_FORMAT_R16_SINT = 59,
  DXGI_FORMAT_R8_TYPELESS = 60,
  DXGI_FORMAT_R8_UNORM = 61,
  DXGI_FORMAT_R8_UINT = 62,
  DXGI_FORMAT_R8_SNORM = 63,
  DXGI_FORMAT_R8_SINT = 64,
  DXGI_FORMAT_A8_UNORM = 65,
  DXGI_FORMAT_R1_UNORM = 66,
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
  DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
  DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
  DXGI_FORMAT_BC1_TYPELESS = 70,
  DXGI_FORMAT_BC1_UNORM = 71,
  DXGI_FORMAT_BC1_UNORM_SRGB = 72,
  DXGI_FORMAT_BC2_TYPELESS = 73,
  DXGI_FORMAT_BC2_UNORM = 74,
  DXGI_FORMAT_BC2_UNORM_SRGB = 75,
  DXGI_FORMAT_BC3_TYPELESS = 76,
  DXGI_FORMAT_BC3_UNORM = 77,
  DXGI_FORMAT_BC3_UNORM_SRGB = 78,
  DXGI_FORMAT_BC4_TYPELESS = 79,
  DXGI_FORMAT_BC4_UNORM = 80,
  DXGI_FORMAT_BC4_SNORM = 81,
  DXGI_FORMAT_BC5_TYPELESS = 82,
  DXGI_FORMAT_BC5_UNORM = 83,
  DXGI_FORMAT_BC5_SNORM = 84,
  DXGI_FORMAT_B5G6R5_UNORM = 85,
  DXGI_FORMAT_B5G5R5A1_UNORM = 86,
  DXGI_FORMAT_B8G8R8A8_UNORM = 87,
  DXGI_FORMAT_B8G8R8X8_UNORM = 88,
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
  DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
  DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
  DXGI_FORMAT_BC6H_TYPELESS = 94,
  DXGI_FORMAT_BC6H_UF16 = 95,
  DXGI_FORMAT_BC6H_SF16 = 96,
  DXGI_FORMAT_BC7_TYPELESS = 97,
  DXGI_FORMAT_BC7_UNORM = 98,
  DXGI_FORMAT_BC7_UNORM_SRGB = 99,
  DXGI_FORMAT_AYUV = 100,
  DXGI_FORMAT_Y410 = 101,
  DXGI_FORMAT_Y416 = 102,
  DXGI_FORMAT_NV12 = 103,
  DXGI_FORMAT_P010 = 104,
  DXGI_FORMAT_P016 = 105,
  DXGI_FORMAT_420_OPAQUE = 106,
  DXGI_FORMAT_YUY2 = 107,
  DXGI_FORMAT_Y210 = 108,
  DXGI_FORMAT_Y216 = 109,
  DXGI_FORMAT_NV11 = 110,
  DXGI_FORMAT_AI44 = 111,
  DXGI_FORMAT_IA44 = 112,
  DXGI_FORMAT_P8 = 113,
  DXGI_FORMAT_A8P8 = 114,
  DXGI_FORMAT_B4G4R4A4_UNORM = 115,
  DXGI_FORMAT_P208 = 130,
  DXGI_FORMAT_V208 = 131,
  DXGI_FORMAT_V408 = 132,
  DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
  DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
  DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;

typedef enum  {
  D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
  D3D10_RESOURCE_DIMENSION_BUFFER = 1,
  D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
  D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
  D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4
} D3D10_RESOURCE_DIMENSION;

typedef struct
{
    DXGI_FORMAT DxgiFormat;
    D3D10_RESOURCE_DIMENSION ResourceDimension;
    uint MiscFlags;
    uint ArraySize;
    uint MiscFlags2;
} DDSHeaderDXT10;

typedef struct
{
    uint Size;
    DDSFlags Flags;
    uint Height;
    uint Width;
    uint PitchOrLinearSize;
    uint Depth;
    uint MipMapCount;
    ubyte Reserved[44] <bgcolor=cGray>;
    DDSPixelFormat PixelFormat;
    SetBackColor(cRed);
    DDSCaps Caps1;
    DDSCaps2 Caps2;
    uint Caps3;
    uint Caps4;
    ubyte Reserved2[4] <bgcolor=cGray>;
} DDSHeader <bgcolor=cGreen>;

typedef struct(uint Size)
{
    ubyte Data[Size];
} mipMapData;

struct
{
    char MAGIC[4] <bgcolor=cRed>;
    DDSHeader Header;

    
    if (Header.PixelFormat.FourCC == "DX10")
    {
        DDSHeaderDXT10 Dxt10Header;
    }
    else if (Header.PixelFormat.FourCC == "\0\0\0\0")
    {
        ubyte UncompressedImageData[(Header.PixelFormat.RGBBitCount/8)*Header.Width*Header.Height] <bgcolor=cYellow>;

        local uint MipWidth;
        local uint MipHeight;
        local int i = 1;
        while ( i < Header.MipMapCount)
        {
            SetRandomBackColor();
            MipWidth = Header.Width >> i;
            MipHeight = Header.Height >> i;
            //ubyte MipMapData[(Header.PixelFormat.RGBBitCount/8)*MipWidth*MipHeight];
            mipMapData MipMapData((Header.PixelFormat.RGBBitCount/8)*MipWidth*MipHeight);
            i++;
        }
    }
} DDSFile;