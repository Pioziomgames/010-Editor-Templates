
//Types

enum<byte>Bool
{
    False = 0,
    True = 1
};

typedef struct
{
    ushort B : 5;
    ushort G : 6;
    ushort R : 5;
    local string ToString;
    SPrintf(ToString, "(%d,%d,%d)", R, G, B);
} ColorBGR565 <read=ColorBGR565_String, optimize=false>;

string ColorBGR565_String(ColorBGR565& input)
{
    return input.ToString;
}

typedef struct
{
    hfloat U;
    hfloat V;
    local string ToString;
    SPrintf(ToString, "(%f,%f)", U, V);
} HVector2 <read=HVector2_String, optimize=false>;

string HVector2_String(HVector2& input)
{
    return input.ToString;
}

typedef struct
{
    float U;
    float V;
    local string ToString;
    SPrintf(ToString, "(%f,%f)", U, V);
} Vector2 <read=Vector2_String, optimize=false>;

string Vector2_String(Vector2& input)
{
    return input.ToString;
}

typedef struct
{
    float X;
    float Y;
    float Z;
    local string ToString;
    SPrintf(ToString, "(%f,%f,%f)", X, Y, Z);
} Vector3 <read=Vector3_String, optimize=false>;

string Vector3_String(Vector3& input)
{
    return input.ToString;
}

typedef struct
{
    hfloat X;
    hfloat Y;
    hfloat Z;
    local string ToString;
    SPrintf(ToString, "(%f,%f,%f)", X, Y, Z);
} HVector3 <read=HVector3_String, optimize=false>;

string HVector3_String(HVector3& input)
{
    return input.ToString;
}

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
    local string ToString;
    SPrintf(ToString, "(%f,%f,%f,%f)", X, Y, Z, W);
} Vector4 <read=Vector4_String, optimize=false>;

string Vector4_String(Vector4& input)
{
    return input.ToString;
}

typedef struct
{
    hfloat X;
    hfloat Y;
    hfloat Z;
    hfloat W;
    local string ToString;
    SPrintf(ToString, "(%f,%f,%f,%f)", X, Y, Z, W);
} HVector4 <read=HVector4_String, optimize=false>;

string HVector4_String(HVector4& input)
{
    return input.ToString;
}

typedef struct {
    Vector3 row1;
    Vector3 row2;
    Vector3 row3;
} Matrix3x3;

typedef struct {
    Vector4 row1;
    Vector4 row2;
    Vector4 row3;
} Matrix3x4;

typedef struct {
    Vector3 row1;
    Vector3 row2;
    Vector3 row3;
    Vector3 row4;
} Matrix4x3;

typedef struct {
    Vector4 row1;
    Vector4 row2;
    Vector4 row3;
    Vector4 row4;
} Matrix4x4;

typedef struct {
    ubyte length;
	char Value[length];
} String8 <read=String8_String, optimize=false>;

string String8_String(String8& input)
{
    return input.Value;
}

typedef struct {
    ushort length;
	char Value[length];
} String16 <read=String16_String, optimize=false>;

string String16_String(String16& input)
{
    return input.Value;
}

typedef struct {
    uint length;
	char Value[length];
} String32 <read=String32_String, optimize=false>;

string String32_String(String32& input)
{
    return input.Value;
}

typedef struct {
    ulong length;
	char Value[length];
} String64 <read=String64_String, optimize=false>;

string String64_String(String64& input)
{
    return input.Value;
}

//Functions

void FAlign( uint value )
{
	FSeek((FTell() + (value - 1)) & ~(value - 1) );
}

uint Align( uint value, uint alignvalue )
{
	return (value + (alignvalue - 1)) & ~(alignvalue - 1);
}
local uint RandomBit = 0;
local uint RandomCount = 0;
local uint RandomSeed = 0x1337C0DE;
 
void SetRandomBackColor()
{
    
    ++RandomCount;
    RandomBit  = ( (RandomSeed >> 0 ) ^ ( RandomSeed >> 2 ) ^ ( RandomSeed >> 3 ) ^ ( RandomSeed >> 5 ) ) & 1;
    RandomSeed = ( ( ( ( RandomBit << 15 ) | ( RandomSeed >> 1 ) ) + ( 0xC0DE / RandomCount ) ) % 0xFFFFFFFF );

    while( RandomSeed < 0 )
        RandomSeed += 0xFFFFFFFF;

     SetBackColor( RandomSeed);
}
