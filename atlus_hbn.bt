//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: Atlus field "hit" data (interaction and player spawn points)
//   Authors: Pioziomgames
//   Version: 1.0
//   Purpose: Editing/Inspecting P3 interaction and spawn points
//  Category: Fields
// File Mask: *.HBN
//  ID Bytes: 0x45678901
//   History: 
//------------------------------------------------

#include "include/common.bt"

//Fbn files unlike cmr
//are in the same space as the field model
//which means that their coordinates are rotated by 90 degrees

typedef struct
{ //Type 0 entries define permanent interaction points
 //and places that teleport you to different fields on entry

//Most entries seem to have the same values and all the interesting
//stuff like which procedure gets called is stored in the f%3d_%3d.bin file
    ubyte EntryIndex;
    ubyte Unk0;
    ubyte Unk1;
    ubyte Unk2;
    byte Unk3;
    ubyte Unk4;
    ubyte Unk5;
    ubyte Unk6;
    Vector3 Position;
    Vector3 Size;
    //idk if I'm missing something or what but it seems that
    //when the z value <= 0 it will use the value from the y value
    //and the z value will be used like this for rotation = (0,-z,0)
    //another thing that's weird and I'm not sure if I understand it corectly
    //is that when the y value is below 0 the values seem to be reversed
    //but maybe all of this is just rotation and I'm just confused with it
} BigEntry;

typedef struct
{ //Type 1 entries define transforms that
//the game can use to spawn the player on a field

    ubyte EntryIndex;
    ubyte Unk0;
    ubyte Unk1;
    ubyte Unk2;
    Vector3 Position;
    float Rotation;
} SmallEntry;

typedef struct 
{
    int Magic <bgcolor=cGreen>;
    ushort VersionMajor <bgcolor=cBlue>;
    ushort VersionMinor <bgcolor=cBlue>;
    int Type0EntryCount <bgcolor=cRed>;
    int Type0EntrySize <bgcolor=cRed>;
    SetBackColor(cGray);
    int Type1EntryCount <bgcolor=cGreen>;
    int Type1EntrySize <bgcolor=cGreen>;

    int Type2EntryCount;
    int Type2EntrySize;

    int Type3EntryCount;
    int Type3EntrySize;
    
    if (VersionMajor != 0)
    {
        int Type4EntryCount;
        int Type4EntrySize;
    
        int Type5EntryCount;
        int Type5EntrySize;
    
        int Type6EntryCount;
        int Type6EntrySize;
    
        int Type7EntryCount;
        int Type7EntrySize;
    }

    BigEntry Type0Entries[Type0EntryCount] <name="Type 1: Interaction data",bgcolor=cRed>;
    SmallEntry Type1Entries[Type1EntryCount] <name="Type 1: Player Entrance data",bgcolor=cGreen>;
    SmallEntry Type2Entries[Type2EntryCount] <name="Type 2 data", bgcolor=cBlack>;

    //This and the next one are found in dungeon parts that can have chests and teleports so perhaps that
    SmallEntry Type3Entries[Type3EntryCount] <name="Type 3 data", bgcolor=cBlack>;
    if (VersionMajor != 0)
    {
        SmallEntry Type4Entries[Type4EntryCount] <name="Type 4 data", bgcolor=cBlack>;
    
        BigEntry Type5Entries[Type5EntryCount] <name="Type 5 data", bgcolor=cBlack>;
        SmallEntry Type6Entries[Type6EntryCount] <name="Type 6 data", bgcolor=cBlack>;
        SmallEntry Type7Entries[Type7EntryCount] <name="Type 7 data", bgcolor=cBlack>;
    }
    //TODO: find fields that use other entries
} FbnFile;

FbnFile File;